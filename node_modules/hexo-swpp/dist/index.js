"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const swpp_backends_1 = __importDefault(require("swpp-backends"));
const path_1 = __importDefault(require("path"));
const logger = require('hexo-log').default();
// noinspection JSUnusedGlobalSymbols
function start(hexo) {
    const config = hexo.config;
    const pluginConfig = config['swpp'] ?? config.theme_config['swpp'];
    if (!pluginConfig?.enable)
        return;
    if (process.argv.find(it => 'server'.startsWith(it)))
        checkVersion(pluginConfig);
    let init = false;
    hexo.on('generateBefore', () => {
        if (init)
            return;
        init = true;
        loadRules(hexo);
        sort(hexo);
        buildServiceWorker(hexo);
    });
    if (pluginConfig['auto_exec']) {
        hexo.on('deployBefore', async () => {
            await runSwpp(hexo, pluginConfig);
        });
    }
    else {
        hexo.extend.console.register('swpp', '生成前端更新需要的 json 文件及后端使用的版本文件', {}, async () => {
            await runSwpp(hexo, pluginConfig);
        });
    }
}
async function runSwpp(hexo, pluginConfig) {
    const config = hexo.config;
    if (!fs.existsSync(config.public_dir))
        return logger.warn(`[SWPP] 未检测到发布目录，跳过指令执行`);
    const rules = loadRules(hexo);
    if (!rules.config.json)
        return logger.error(`[SWPP] JSON 生成功能未开启，跳过指令执行`);
    const url = config.url;
    await Promise.all([
        swpp_backends_1.default.loader.loadUpdateJson(url + '/update.json', pluginConfig['warn_level'] ?? 1),
        swpp_backends_1.default.loader.loadVersionJson(url + '/cacheList.json', pluginConfig['warn_level'] ?? 1)
    ]);
    await buildVersionJson(hexo);
    const dif = swpp_backends_1.default.builder.analyzeVersion();
    await buildUpdateJson(hexo, dif);
}
function checkVersion(pluginConfig) {
    const root = pluginConfig['npm_url'] ?? 'https://registry.npmjs.org';
    (0, node_fetch_1.default)(`${root}/swpp-backends/${swpp_backends_1.default.version}`)
        .then(response => {
        if (![200, 301, 302, 307, 308].includes(response.status))
            return Promise.reject(response.status);
        return response.json();
    }).then(json => {
        if ('error' in json)
            return Promise.reject(json.error);
        if ('deprecated' in json) {
            logger.error(`[SWPP VersionChecker] 您使用的 swpp-backends@${swpp_backends_1.default.version} 已被弃用，请更新版本！`);
            logger.error(`\t补充信息：${json['deprecated']}`);
        }
        else {
            logger.info('[SWPP VersionChecker] 版本检查通过，注意定期检查版本更新。');
        }
    }).catch(err => {
        const isSimple = ['number', 'string'].includes(typeof err);
        logger.warn(`[SWPP VersionChecker] 版本检查失败${isSimple ? ('（' + err + '）') : ''}`);
        if (!isSimple)
            logger.warn(err);
    });
}
function loadRules(hexo) {
    const themeName = hexo.config.theme;
    swpp_backends_1.default.event.addRulesMapEvent(rules => {
        if ('cacheList' in rules && !('cacheRules' in rules)) {
            rules.cacheRules = rules['cacheList'];
            delete rules['cacheList'];
        }
        if ('getCdnList' in rules && !('getRaceUrls' in rules)) {
            rules.getRaceUrls = rules['getCdnList'];
            delete rules['getCdnList'];
        }
    });
    const result = swpp_backends_1.default.loader.loadRules('./', 'sw-rules', [`./themes/${themeName}/`, `./node_modules/hexo-${themeName}/`]);
    swpp_backends_1.default.builder.calcEjectValues(hexo);
    return result;
}
async function buildUpdateJson(hexo, dif) {
    const url = hexo.config.url;
    const json = swpp_backends_1.default.builder.buildUpdateJson(url, dif);
    fs.writeFileSync(`${hexo.config.public_dir}/update.json`, JSON.stringify(json), 'utf-8');
    logger.info('成功生成：update.json');
}
async function buildVersionJson(hexo) {
    const url = hexo.config.url;
    let protocol, domain;
    if (url.startsWith('https:')) {
        protocol = 'https://';
    }
    else {
        protocol = 'http://';
    }
    domain = url.substring(protocol.length, url.endsWith('/') ? url.length - 1 : url.length);
    // @ts-ignore
    const json = await swpp_backends_1.default.builder.buildVersionJson(protocol, domain, path_1.default.resolve('./', hexo.config.public_dir));
    fs.writeFileSync(`${hexo.config.public_dir}/cacheList.json`, JSON.stringify(json), 'utf-8');
    logger.info('成功生成：cacheList.json');
}
function buildServiceWorker(hexo) {
    const rules = swpp_backends_1.default.cache.readRules();
    const pluginConfig = rules.config;
    // 生成 sw
    if (pluginConfig.serviceWorker) {
        hexo.extend.generator.register('build_service_worker', () => {
            return {
                path: 'sw.js',
                data: swpp_backends_1.default.builder.buildServiceWorker()
            };
        });
    }
    // 生成注册 sw 的代码
    if (pluginConfig.register) {
        hexo.extend.injector.register('head_begin', () => pluginConfig.register.builder(hexo.config.url, hexo, pluginConfig));
    }
    // 生成 sw-dom.js
    if (pluginConfig.dom) {
        // noinspection HtmlUnknownTarget
        hexo.extend.injector.register('body_begin', () => `<script defer src="/sw-dom.js"></script>`);
        hexo.extend.generator.register('build_dom_js', () => {
            return {
                path: 'sw-dom.js',
                data: swpp_backends_1.default.builder.buildDomJs()
            };
        });
    }
}
/** 对 hexo 中的变量进行排序 */
function sort(hexo) {
    const version = hexo.version;
    let Locals;
    if (version.startsWith('7')) {
        Locals = require(path_1.default.resolve('./', 'node_modules/hexo/dist/hexo/locals')).prototype;
    }
    else {
        Locals = require(path_1.default.resolve('./', 'node_modules/hexo/lib/hexo/locals')).prototype;
    }
    const compare = (a, b) => {
        const result = a.length === b.length ? a < b : a.length < b.length;
        return result ? -1 : 1;
    };
    const sort = (obj, value) => {
        if (!obj)
            return;
        const target = obj.data ?? obj;
        if (!target.sort)
            return;
        if (typeof value === 'boolean') {
            if (value)
                target.sort(compare);
        }
        else {
            target.sort((a, b) => compare(a[value], b[value]));
        }
    };
    const list = {
        posts: 'title',
        pages: 'title',
        tags: 'name'
    };
    // @ts-ignore
    Object.assign(list, swpp_backends_1.default.cache.readRules().config['sort'] ?? {});
    const getter = Locals.get;
    Locals.get = function (name) {
        const result = getter.call(this, name);
        if (name in list)
            sort(result, list[name]);
        if ('forEach' in result) {
            result.forEach((it) => {
                for (let tag in list)
                    sort(it[tag], list[tag]);
            });
        }
        return result;
    };
}
try {
    // noinspection TypeScriptUnresolvedReference
    // @ts-ignore
    start(hexo);
}
catch (e) {
    logger.error("[SWPP] 加载时遇到错误，可能是由于缺少规则文件。");
    logger.error(e);
    process.exit(114514);
}
